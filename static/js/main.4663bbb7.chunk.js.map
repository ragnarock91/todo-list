{"version":3,"sources":["components/ListInput.js","components/ToDoItem.js","components/ToDOList.js","App.js","serviceWorker.js","index.js"],"names":["ListInput","state","todo","onInputChange","event","temp","target","value","_this","setState","onButtonClick","props","react_default","a","createElement","type","this","onChange","onClick","React","Component","ToDoItem","status","todoitem","ToDoList","todolist","map","index","components_ToDoItem","App","todoList","onListInputConfirm","console","log","dummyArray","slice","push","className","components_ListInput","ToDOList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAwBeA,oNArBXC,MAAQ,CACJC,KAAM,MAEVC,cAAgB,SAAAC,GACZ,IAAIC,EAAOD,EAAME,OAAOC,MACxBC,EAAKC,SAAS,CAAEP,KAAMG,OAE1BK,cAAgB,SAAAN,GACZI,EAAKG,MAAMR,cAAcK,EAAKP,MAAMC,MACpCM,EAAKC,SAAS,CAAEP,KAAM,8EAGtB,OACIU,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOR,MAAOS,KAAKf,MAAMC,KAAMe,SAAUD,KAAKb,gBAC1DS,EAAAC,EAAAC,cAAA,UAAQI,QAAWF,KAAKN,eAAxB,uBAhBQS,IAAMC,YCwBfC,6MAvBXpB,MAAQ,CACJC,KAAM,GACNoB,OAAQ,MAGZZ,cAAgB,SAAAN,GACa,IAArBI,EAAKP,MAAMqB,OACXd,EAAKC,SAAS,CAACa,OAAQ,MAEvBd,EAAKC,SAAS,CAACa,OAAQ,8EAK3B,OACIV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,aAAQE,KAAKL,MAAMY,UACnBX,EAAAC,EAAAC,cAAA,UAAQI,QAAWF,KAAKN,eAAiBM,KAAKf,MAAMqB,gBAlB7CH,IAAMC,WCYdI,EAXE,SAAAb,GACb,OACAC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACCH,EAAMc,SAASC,IAAI,SAACxB,EAAKyB,GACtB,OAAOf,EAAAC,EAAAC,cAACc,EAAD,CAAUL,SAAUrB,SCexB2B,6MAjBb5B,MAAS,CAAE6B,SAAU,MACrBC,mBAAqB,SAAAxB,GACnByB,QAAQC,IAAI1B,GACZ,IAAI2B,EAAa1B,EAAKP,MAAM6B,SAASK,QACrCD,EAAWE,KAAK7B,GAChBC,EAAKC,SAAS,CAAEqB,SAAUI,6EAG1B,OACEtB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,OACbzB,EAAAC,EAAAC,cAACwB,EAAD,CAAWnC,cAAea,KAAKe,qBAC/BnB,EAAAC,EAAAC,cAACyB,EAAD,CAAUd,SAAUT,KAAKf,MAAM6B,mBAZrBX,IAAMC,WCOJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4663bbb7.chunk.js","sourcesContent":["import React from \"react\";\n\nclass ListInput extends React.Component {\n    state = {\n        todo: \"\"\n    };\n    onInputChange = event => {\n        let temp = event.target.value;\n        this.setState({ todo: temp })\n    };\n    onButtonClick = event => {\n        this.props.onInputChange(this.state.todo)\n        this.setState({ todo: \"\"})\n    }\n    render() {\n        return (\n            <div>\n                <input type=\"text\" value={this.state.todo} onChange={this.onInputChange}/>\n                <button onClick= { this.onButtonClick }>Add to List</button>\n            </div>\n        );\n    }\n}\n\nexport default ListInput;","import React from \"react\";\n\nclass ToDoItem extends React.Component {\n    state = {\n        todo: \"\",\n        status: \"\"\n    };\n\n    onButtonClick = event => {\n        if (this.state.status == \"\") {\n            this.setState({status: \"x\"})\n        } else {\n            this.setState({status: \"\"})\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <label>{this.props.todoitem}</label>\n                <button onClick= { this.onButtonClick }>{this.state.status}</button>\n            </div>\n        );\n    }\n}\n\nexport default ToDoItem;","import React from 'react';\nimport ToDoItem from './ToDoItem';\n\nconst ToDoList = props => {\n    return (\n    <div>\n        <ul> \n        {props.todolist.map((todo,index) => {\n            return <ToDoItem todoitem={todo}/>;\n    })} \n        </ul>\n    </div>)\n};\n\nexport default ToDoList;","import React from 'react';\nimport './App.css';\nimport ListInput from \"./components/ListInput\";\nimport ToDoList from './components/ToDOList';\n\nclass App extends React.Component {\n  state  = { todoList: [] };\n  onListInputConfirm = value => {\n    console.log(value)\n    let dummyArray = this.state.todoList.slice();\n    dummyArray.push(value);\n    this.setState({ todoList: dummyArray })\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <ListInput onInputChange={this.onListInputConfirm}/>\n        <ToDoList todolist={this.state.todoList}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}